// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: rpc_msg.proto

package rpc

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import encoding_binary "encoding/binary"

import io "io"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type RPC_MSGID int32

const (
	RPC_MSGID_HANDSHAKE RPC_MSGID = -256
	RPC_MSGID_CALL      RPC_MSGID = -512
	RPC_MSGID_RETURN    RPC_MSGID = -514
)

var RPC_MSGID_name = map[int32]string{
	-256: "HANDSHAKE",
	-512: "CALL",
	-514: "RETURN",
}
var RPC_MSGID_value = map[string]int32{
	"HANDSHAKE": -256,
	"CALL":      -512,
	"RETURN":    -514,
}

func (x RPC_MSGID) Enum() *RPC_MSGID {
	p := new(RPC_MSGID)
	*p = x
	return p
}
func (x RPC_MSGID) String() string {
	return proto.EnumName(RPC_MSGID_name, int32(x))
}
func (x *RPC_MSGID) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RPC_MSGID_value, data, "RPC_MSGID")
	if err != nil {
		return err
	}
	*x = RPC_MSGID(value)
	return nil
}
func (RPC_MSGID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_rpc_msg_0ea6e11804f38f90, []int{0}
}

type RPCValue struct {
	Kind                 int32     `protobuf:"varint,1,req,name=kind" json:"kind"`
	I32                  int32     `protobuf:"varint,2,opt,name=i32" json:"i32"`
	I64                  int64     `protobuf:"varint,3,opt,name=i64" json:"i64"`
	U32                  uint32    `protobuf:"varint,4,opt,name=u32" json:"u32"`
	U64                  uint64    `protobuf:"varint,5,opt,name=u64" json:"u64"`
	F32                  float32   `protobuf:"fixed32,6,opt,name=f32" json:"f32"`
	F64                  float64   `protobuf:"fixed64,7,opt,name=f64" json:"f64"`
	B                    bool      `protobuf:"varint,8,opt,name=b" json:"b"`
	S                    string    `protobuf:"bytes,9,opt,name=s" json:"s"`
	I32A                 []int32   `protobuf:"varint,10,rep,name=i32a" json:"i32a,omitempty"`
	I64A                 []int64   `protobuf:"varint,11,rep,name=i64a" json:"i64a,omitempty"`
	U32A                 []uint32  `protobuf:"varint,12,rep,name=u32a" json:"u32a,omitempty"`
	U64A                 []uint64  `protobuf:"varint,13,rep,name=u64a" json:"u64a,omitempty"`
	F32A                 []float32 `protobuf:"fixed32,14,rep,name=f32a" json:"f32a,omitempty"`
	F64A                 []float64 `protobuf:"fixed64,15,rep,name=f64a" json:"f64a,omitempty"`
	Ba                   []bool    `protobuf:"varint,16,rep,name=ba" json:"ba,omitempty"`
	Sa                   []string  `protobuf:"bytes,17,rep,name=sa" json:"sa,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *RPCValue) Reset()         { *m = RPCValue{} }
func (m *RPCValue) String() string { return proto.CompactTextString(m) }
func (*RPCValue) ProtoMessage()    {}
func (*RPCValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpc_msg_0ea6e11804f38f90, []int{0}
}
func (m *RPCValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RPCValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RPCValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RPCValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RPCValue.Merge(dst, src)
}
func (m *RPCValue) XXX_Size() int {
	return m.Size()
}
func (m *RPCValue) XXX_DiscardUnknown() {
	xxx_messageInfo_RPCValue.DiscardUnknown(m)
}

var xxx_messageInfo_RPCValue proto.InternalMessageInfo

func (m *RPCValue) GetKind() int32 {
	if m != nil {
		return m.Kind
	}
	return 0
}

func (m *RPCValue) GetI32() int32 {
	if m != nil {
		return m.I32
	}
	return 0
}

func (m *RPCValue) GetI64() int64 {
	if m != nil {
		return m.I64
	}
	return 0
}

func (m *RPCValue) GetU32() uint32 {
	if m != nil {
		return m.U32
	}
	return 0
}

func (m *RPCValue) GetU64() uint64 {
	if m != nil {
		return m.U64
	}
	return 0
}

func (m *RPCValue) GetF32() float32 {
	if m != nil {
		return m.F32
	}
	return 0
}

func (m *RPCValue) GetF64() float64 {
	if m != nil {
		return m.F64
	}
	return 0
}

func (m *RPCValue) GetB() bool {
	if m != nil {
		return m.B
	}
	return false
}

func (m *RPCValue) GetS() string {
	if m != nil {
		return m.S
	}
	return ""
}

func (m *RPCValue) GetI32A() []int32 {
	if m != nil {
		return m.I32A
	}
	return nil
}

func (m *RPCValue) GetI64A() []int64 {
	if m != nil {
		return m.I64A
	}
	return nil
}

func (m *RPCValue) GetU32A() []uint32 {
	if m != nil {
		return m.U32A
	}
	return nil
}

func (m *RPCValue) GetU64A() []uint64 {
	if m != nil {
		return m.U64A
	}
	return nil
}

func (m *RPCValue) GetF32A() []float32 {
	if m != nil {
		return m.F32A
	}
	return nil
}

func (m *RPCValue) GetF64A() []float64 {
	if m != nil {
		return m.F64A
	}
	return nil
}

func (m *RPCValue) GetBa() []bool {
	if m != nil {
		return m.Ba
	}
	return nil
}

func (m *RPCValue) GetSa() []string {
	if m != nil {
		return m.Sa
	}
	return nil
}

type RPCHandShake struct {
	EndName              string   `protobuf:"bytes,1,req,name=endName" json:"endName"`
	EndModelName         string   `protobuf:"bytes,2,req,name=endModelName" json:"endModelName"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RPCHandShake) Reset()         { *m = RPCHandShake{} }
func (m *RPCHandShake) String() string { return proto.CompactTextString(m) }
func (*RPCHandShake) ProtoMessage()    {}
func (*RPCHandShake) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpc_msg_0ea6e11804f38f90, []int{1}
}
func (m *RPCHandShake) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RPCHandShake) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RPCHandShake.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RPCHandShake) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RPCHandShake.Merge(dst, src)
}
func (m *RPCHandShake) XXX_Size() int {
	return m.Size()
}
func (m *RPCHandShake) XXX_DiscardUnknown() {
	xxx_messageInfo_RPCHandShake.DiscardUnknown(m)
}

var xxx_messageInfo_RPCHandShake proto.InternalMessageInfo

func (m *RPCHandShake) GetEndName() string {
	if m != nil {
		return m.EndName
	}
	return ""
}

func (m *RPCHandShake) GetEndModelName() string {
	if m != nil {
		return m.EndModelName
	}
	return ""
}

type RPCMethodCall struct {
	CallSeq              uint32               `protobuf:"varint,1,req,name=call_seq,json=callSeq" json:"call_seq"`
	Method               string               `protobuf:"bytes,2,req,name=method" json:"method"`
	Args                 map[string]*RPCValue `protobuf:"bytes,3,rep,name=args" json:"args,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Caller               string               `protobuf:"bytes,4,req,name=caller" json:"caller"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *RPCMethodCall) Reset()         { *m = RPCMethodCall{} }
func (m *RPCMethodCall) String() string { return proto.CompactTextString(m) }
func (*RPCMethodCall) ProtoMessage()    {}
func (*RPCMethodCall) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpc_msg_0ea6e11804f38f90, []int{2}
}
func (m *RPCMethodCall) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RPCMethodCall) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RPCMethodCall.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RPCMethodCall) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RPCMethodCall.Merge(dst, src)
}
func (m *RPCMethodCall) XXX_Size() int {
	return m.Size()
}
func (m *RPCMethodCall) XXX_DiscardUnknown() {
	xxx_messageInfo_RPCMethodCall.DiscardUnknown(m)
}

var xxx_messageInfo_RPCMethodCall proto.InternalMessageInfo

func (m *RPCMethodCall) GetCallSeq() uint32 {
	if m != nil {
		return m.CallSeq
	}
	return 0
}

func (m *RPCMethodCall) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *RPCMethodCall) GetArgs() map[string]*RPCValue {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *RPCMethodCall) GetCaller() string {
	if m != nil {
		return m.Caller
	}
	return ""
}

type RPCMethodReturn struct {
	CallSeq              uint32               `protobuf:"varint,1,req,name=call_seq,json=callSeq" json:"call_seq"`
	Method               string               `protobuf:"bytes,2,req,name=method" json:"method"`
	Returns              map[string]*RPCValue `protobuf:"bytes,3,rep,name=returns" json:"returns,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *RPCMethodReturn) Reset()         { *m = RPCMethodReturn{} }
func (m *RPCMethodReturn) String() string { return proto.CompactTextString(m) }
func (*RPCMethodReturn) ProtoMessage()    {}
func (*RPCMethodReturn) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpc_msg_0ea6e11804f38f90, []int{3}
}
func (m *RPCMethodReturn) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RPCMethodReturn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RPCMethodReturn.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RPCMethodReturn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RPCMethodReturn.Merge(dst, src)
}
func (m *RPCMethodReturn) XXX_Size() int {
	return m.Size()
}
func (m *RPCMethodReturn) XXX_DiscardUnknown() {
	xxx_messageInfo_RPCMethodReturn.DiscardUnknown(m)
}

var xxx_messageInfo_RPCMethodReturn proto.InternalMessageInfo

func (m *RPCMethodReturn) GetCallSeq() uint32 {
	if m != nil {
		return m.CallSeq
	}
	return 0
}

func (m *RPCMethodReturn) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *RPCMethodReturn) GetReturns() map[string]*RPCValue {
	if m != nil {
		return m.Returns
	}
	return nil
}

func init() {
	proto.RegisterType((*RPCValue)(nil), "rpc.RPCValue")
	proto.RegisterType((*RPCHandShake)(nil), "rpc.RPCHandShake")
	proto.RegisterType((*RPCMethodCall)(nil), "rpc.RPCMethodCall")
	proto.RegisterMapType((map[string]*RPCValue)(nil), "rpc.RPCMethodCall.ArgsEntry")
	proto.RegisterType((*RPCMethodReturn)(nil), "rpc.RPCMethodReturn")
	proto.RegisterMapType((map[string]*RPCValue)(nil), "rpc.RPCMethodReturn.ReturnsEntry")
	proto.RegisterEnum("rpc.RPC_MSGID", RPC_MSGID_name, RPC_MSGID_value)
}
func (m *RPCValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RPCValue) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintRpcMsg(dAtA, i, uint64(m.Kind))
	dAtA[i] = 0x10
	i++
	i = encodeVarintRpcMsg(dAtA, i, uint64(m.I32))
	dAtA[i] = 0x18
	i++
	i = encodeVarintRpcMsg(dAtA, i, uint64(m.I64))
	dAtA[i] = 0x20
	i++
	i = encodeVarintRpcMsg(dAtA, i, uint64(m.U32))
	dAtA[i] = 0x28
	i++
	i = encodeVarintRpcMsg(dAtA, i, uint64(m.U64))
	dAtA[i] = 0x35
	i++
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.F32))))
	i += 4
	dAtA[i] = 0x39
	i++
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.F64))))
	i += 8
	dAtA[i] = 0x40
	i++
	if m.B {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0x4a
	i++
	i = encodeVarintRpcMsg(dAtA, i, uint64(len(m.S)))
	i += copy(dAtA[i:], m.S)
	if len(m.I32A) > 0 {
		for _, num := range m.I32A {
			dAtA[i] = 0x50
			i++
			i = encodeVarintRpcMsg(dAtA, i, uint64(num))
		}
	}
	if len(m.I64A) > 0 {
		for _, num := range m.I64A {
			dAtA[i] = 0x58
			i++
			i = encodeVarintRpcMsg(dAtA, i, uint64(num))
		}
	}
	if len(m.U32A) > 0 {
		for _, num := range m.U32A {
			dAtA[i] = 0x60
			i++
			i = encodeVarintRpcMsg(dAtA, i, uint64(num))
		}
	}
	if len(m.U64A) > 0 {
		for _, num := range m.U64A {
			dAtA[i] = 0x68
			i++
			i = encodeVarintRpcMsg(dAtA, i, uint64(num))
		}
	}
	if len(m.F32A) > 0 {
		for _, num := range m.F32A {
			dAtA[i] = 0x75
			i++
			f1 := math.Float32bits(float32(num))
			encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(f1))
			i += 4
		}
	}
	if len(m.F64A) > 0 {
		for _, num := range m.F64A {
			dAtA[i] = 0x79
			i++
			f2 := math.Float64bits(float64(num))
			encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(f2))
			i += 8
		}
	}
	if len(m.Ba) > 0 {
		for _, b := range m.Ba {
			dAtA[i] = 0x80
			i++
			dAtA[i] = 0x1
			i++
			if b {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i++
		}
	}
	if len(m.Sa) > 0 {
		for _, s := range m.Sa {
			dAtA[i] = 0x8a
			i++
			dAtA[i] = 0x1
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *RPCHandShake) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RPCHandShake) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintRpcMsg(dAtA, i, uint64(len(m.EndName)))
	i += copy(dAtA[i:], m.EndName)
	dAtA[i] = 0x12
	i++
	i = encodeVarintRpcMsg(dAtA, i, uint64(len(m.EndModelName)))
	i += copy(dAtA[i:], m.EndModelName)
	return i, nil
}

func (m *RPCMethodCall) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RPCMethodCall) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintRpcMsg(dAtA, i, uint64(m.CallSeq))
	dAtA[i] = 0x12
	i++
	i = encodeVarintRpcMsg(dAtA, i, uint64(len(m.Method)))
	i += copy(dAtA[i:], m.Method)
	if len(m.Args) > 0 {
		for k, _ := range m.Args {
			dAtA[i] = 0x1a
			i++
			v := m.Args[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovRpcMsg(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovRpcMsg(uint64(len(k))) + msgSize
			i = encodeVarintRpcMsg(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintRpcMsg(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintRpcMsg(dAtA, i, uint64(v.Size()))
				n3, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n3
			}
		}
	}
	dAtA[i] = 0x22
	i++
	i = encodeVarintRpcMsg(dAtA, i, uint64(len(m.Caller)))
	i += copy(dAtA[i:], m.Caller)
	return i, nil
}

func (m *RPCMethodReturn) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RPCMethodReturn) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintRpcMsg(dAtA, i, uint64(m.CallSeq))
	dAtA[i] = 0x12
	i++
	i = encodeVarintRpcMsg(dAtA, i, uint64(len(m.Method)))
	i += copy(dAtA[i:], m.Method)
	if len(m.Returns) > 0 {
		for k, _ := range m.Returns {
			dAtA[i] = 0x1a
			i++
			v := m.Returns[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovRpcMsg(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovRpcMsg(uint64(len(k))) + msgSize
			i = encodeVarintRpcMsg(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintRpcMsg(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintRpcMsg(dAtA, i, uint64(v.Size()))
				n4, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n4
			}
		}
	}
	return i, nil
}

func encodeVarintRpcMsg(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *RPCValue) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovRpcMsg(uint64(m.Kind))
	n += 1 + sovRpcMsg(uint64(m.I32))
	n += 1 + sovRpcMsg(uint64(m.I64))
	n += 1 + sovRpcMsg(uint64(m.U32))
	n += 1 + sovRpcMsg(uint64(m.U64))
	n += 5
	n += 9
	n += 2
	l = len(m.S)
	n += 1 + l + sovRpcMsg(uint64(l))
	if len(m.I32A) > 0 {
		for _, e := range m.I32A {
			n += 1 + sovRpcMsg(uint64(e))
		}
	}
	if len(m.I64A) > 0 {
		for _, e := range m.I64A {
			n += 1 + sovRpcMsg(uint64(e))
		}
	}
	if len(m.U32A) > 0 {
		for _, e := range m.U32A {
			n += 1 + sovRpcMsg(uint64(e))
		}
	}
	if len(m.U64A) > 0 {
		for _, e := range m.U64A {
			n += 1 + sovRpcMsg(uint64(e))
		}
	}
	if len(m.F32A) > 0 {
		n += 5 * len(m.F32A)
	}
	if len(m.F64A) > 0 {
		n += 9 * len(m.F64A)
	}
	if len(m.Ba) > 0 {
		n += 3 * len(m.Ba)
	}
	if len(m.Sa) > 0 {
		for _, s := range m.Sa {
			l = len(s)
			n += 2 + l + sovRpcMsg(uint64(l))
		}
	}
	return n
}

func (m *RPCHandShake) Size() (n int) {
	var l int
	_ = l
	l = len(m.EndName)
	n += 1 + l + sovRpcMsg(uint64(l))
	l = len(m.EndModelName)
	n += 1 + l + sovRpcMsg(uint64(l))
	return n
}

func (m *RPCMethodCall) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovRpcMsg(uint64(m.CallSeq))
	l = len(m.Method)
	n += 1 + l + sovRpcMsg(uint64(l))
	if len(m.Args) > 0 {
		for k, v := range m.Args {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovRpcMsg(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovRpcMsg(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovRpcMsg(uint64(mapEntrySize))
		}
	}
	l = len(m.Caller)
	n += 1 + l + sovRpcMsg(uint64(l))
	return n
}

func (m *RPCMethodReturn) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovRpcMsg(uint64(m.CallSeq))
	l = len(m.Method)
	n += 1 + l + sovRpcMsg(uint64(l))
	if len(m.Returns) > 0 {
		for k, v := range m.Returns {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovRpcMsg(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovRpcMsg(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovRpcMsg(uint64(mapEntrySize))
		}
	}
	return n
}

func sovRpcMsg(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRpcMsg(x uint64) (n int) {
	return sovRpcMsg(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RPCValue) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpcMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RPCValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RPCValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			m.Kind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kind |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field I32", wireType)
			}
			m.I32 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.I32 |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field I64", wireType)
			}
			m.I64 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.I64 |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field U32", wireType)
			}
			m.U32 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.U32 |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field U64", wireType)
			}
			m.U64 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.U64 |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field F32", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.F32 = float32(math.Float32frombits(v))
		case 7:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field F64", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.F64 = float64(math.Float64frombits(v))
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field B", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.B = bool(v != 0)
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field S", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpcMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.S = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRpcMsg
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.I32A = append(m.I32A, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRpcMsg
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRpcMsg
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRpcMsg
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.I32A = append(m.I32A, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field I32A", wireType)
			}
		case 11:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRpcMsg
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.I64A = append(m.I64A, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRpcMsg
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRpcMsg
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRpcMsg
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.I64A = append(m.I64A, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field I64A", wireType)
			}
		case 12:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRpcMsg
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.U32A = append(m.U32A, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRpcMsg
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRpcMsg
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRpcMsg
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.U32A = append(m.U32A, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field U32A", wireType)
			}
		case 13:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRpcMsg
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.U64A = append(m.U64A, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRpcMsg
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRpcMsg
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRpcMsg
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.U64A = append(m.U64A, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field U64A", wireType)
			}
		case 14:
			if wireType == 5 {
				var v uint32
				if (iNdEx + 4) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
				iNdEx += 4
				v2 := float32(math.Float32frombits(v))
				m.F32A = append(m.F32A, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRpcMsg
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRpcMsg
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				if len(m.F32A) == 0 {
					m.F32A = make([]float32, 0, packedLen/4)
				}
				for iNdEx < postIndex {
					var v uint32
					if (iNdEx + 4) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
					iNdEx += 4
					v2 := float32(math.Float32frombits(v))
					m.F32A = append(m.F32A, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field F32A", wireType)
			}
		case 15:
			if wireType == 1 {
				var v uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				v2 := float64(math.Float64frombits(v))
				m.F64A = append(m.F64A, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRpcMsg
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRpcMsg
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				if len(m.F64A) == 0 {
					m.F64A = make([]float64, 0, packedLen/8)
				}
				for iNdEx < postIndex {
					var v uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					v2 := float64(math.Float64frombits(v))
					m.F64A = append(m.F64A, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field F64A", wireType)
			}
		case 16:
			if wireType == 0 {
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRpcMsg
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Ba = append(m.Ba, bool(v != 0))
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRpcMsg
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRpcMsg
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRpcMsg
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Ba = append(m.Ba, bool(v != 0))
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Ba", wireType)
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sa", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpcMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sa = append(m.Sa, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpcMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpcMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("kind")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RPCHandShake) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpcMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RPCHandShake: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RPCHandShake: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpcMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndModelName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpcMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndModelName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipRpcMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpcMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("endName")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("endModelName")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RPCMethodCall) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpcMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RPCMethodCall: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RPCMethodCall: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallSeq", wireType)
			}
			m.CallSeq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CallSeq |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpcMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Method = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Args", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpcMsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Args == nil {
				m.Args = make(map[string]*RPCValue)
			}
			var mapkey string
			var mapvalue *RPCValue
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRpcMsg
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRpcMsg
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthRpcMsg
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRpcMsg
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthRpcMsg
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthRpcMsg
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &RPCValue{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipRpcMsg(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthRpcMsg
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Args[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Caller", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpcMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Caller = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipRpcMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpcMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("call_seq")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("method")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("caller")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RPCMethodReturn) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpcMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RPCMethodReturn: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RPCMethodReturn: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallSeq", wireType)
			}
			m.CallSeq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CallSeq |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpcMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Method = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Returns", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpcMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpcMsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Returns == nil {
				m.Returns = make(map[string]*RPCValue)
			}
			var mapkey string
			var mapvalue *RPCValue
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRpcMsg
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRpcMsg
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthRpcMsg
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRpcMsg
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthRpcMsg
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthRpcMsg
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &RPCValue{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipRpcMsg(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthRpcMsg
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Returns[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpcMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpcMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("call_seq")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("method")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRpcMsg(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRpcMsg
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRpcMsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRpcMsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRpcMsg
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRpcMsg
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRpcMsg(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRpcMsg = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRpcMsg   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("rpc_msg.proto", fileDescriptor_rpc_msg_0ea6e11804f38f90) }

var fileDescriptor_rpc_msg_0ea6e11804f38f90 = []byte{
	// 568 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x92, 0x4f, 0x4f, 0xdb, 0x30,
	0x18, 0xc6, 0x71, 0x9c, 0xd2, 0xf6, 0xa5, 0x81, 0xe2, 0x49, 0xc8, 0x42, 0xa8, 0x78, 0xdd, 0xc5,
	0xda, 0xa1, 0x9a, 0xd2, 0x28, 0x9a, 0xb6, 0x53, 0x09, 0x68, 0x4c, 0xfc, 0x59, 0xe5, 0x6e, 0xd3,
	0x6e, 0xc8, 0x6d, 0x5c, 0x40, 0x84, 0xb4, 0x24, 0xcd, 0x24, 0x6e, 0x7c, 0x84, 0x7d, 0x2c, 0x8e,
	0xfb, 0x04, 0x68, 0x62, 0xd7, 0x1d, 0x77, 0xdb, 0xc4, 0x26, 0x3b, 0x24, 0x6a, 0xcf, 0xf4, 0xd2,
	0x27, 0xbf, 0xf7, 0xf1, 0xe3, 0x3c, 0xb1, 0xc1, 0x49, 0xa6, 0xa3, 0x93, 0xcb, 0xf4, 0xb4, 0x33,
	0x4d, 0x26, 0xb3, 0x09, 0xc1, 0xc9, 0x74, 0xd4, 0xfe, 0x6d, 0x41, 0x4d, 0xf4, 0x83, 0xcf, 0x32,
	0xca, 0x14, 0xa1, 0x60, 0x5f, 0x9c, 0xc7, 0x21, 0x45, 0xcc, 0xe2, 0x95, 0x1d, 0xfb, 0xf6, 0x6e,
	0x7b, 0x49, 0x18, 0x42, 0x36, 0x00, 0x9f, 0x77, 0x5d, 0x6a, 0x31, 0x54, 0x0e, 0x34, 0x30, 0xdc,
	0xf7, 0x28, 0x66, 0x88, 0xe3, 0x92, 0xfb, 0x9e, 0xe6, 0x59, 0xd7, 0xa5, 0x36, 0x43, 0xdc, 0x29,
	0x78, 0x96, 0xfb, 0x33, 0xdf, 0xa3, 0x15, 0x86, 0xb8, 0x5d, 0xf2, 0xdc, 0x3f, 0xee, 0xba, 0x74,
	0x99, 0x21, 0x6e, 0x15, 0x7c, 0x9c, 0xfb, 0xc7, 0xbe, 0x47, 0xab, 0x0c, 0x71, 0x54, 0x72, 0xdf,
	0x23, 0x04, 0xd0, 0x90, 0xd6, 0x18, 0xe2, 0xb5, 0x47, 0x8a, 0x86, 0x9a, 0xa5, 0xb4, 0xce, 0x10,
	0xaf, 0x17, 0x2c, 0x25, 0x04, 0xec, 0xf3, 0xae, 0x2b, 0x29, 0x30, 0xcc, 0x2b, 0xc2, 0x68, 0xc3,
	0x7c, 0x4f, 0xd2, 0x15, 0x86, 0x39, 0x16, 0x46, 0x6b, 0x96, 0x69, 0x5f, 0x83, 0x61, 0xee, 0x08,
	0xa3, 0x0d, 0xd3, 0x3e, 0x87, 0x61, 0x6e, 0x0b, 0xa3, 0x35, 0x1b, 0x6b, 0xdf, 0x2a, 0xc3, 0xdc,
	0x12, 0x46, 0x1b, 0xa6, 0x7d, 0x6b, 0x0c, 0x73, 0x24, 0x8c, 0x26, 0xab, 0x60, 0x0d, 0x25, 0x6d,
	0x32, 0xcc, 0x6b, 0xc2, 0x1a, 0x9a, 0xe7, 0x54, 0xd2, 0x75, 0x86, 0x79, 0x5d, 0x58, 0xa9, 0x6c,
	0x7f, 0x81, 0x86, 0xe8, 0x07, 0xfb, 0x32, 0x0e, 0x07, 0x67, 0xf2, 0x42, 0x91, 0x16, 0x54, 0x55,
	0x1c, 0x1e, 0xcb, 0x4b, 0x65, 0x3e, 0x7e, 0xd1, 0xa0, 0x80, 0x84, 0x43, 0x43, 0xc5, 0xe1, 0xd1,
	0x24, 0x54, 0x91, 0x31, 0x59, 0x73, 0xa6, 0x85, 0x49, 0xfb, 0x17, 0x02, 0x47, 0xf4, 0x83, 0x23,
	0x35, 0x3b, 0x9b, 0x84, 0x81, 0x8c, 0x22, 0xb2, 0x0d, 0xb5, 0x91, 0x8c, 0xa2, 0x93, 0x54, 0x5d,
	0x99, 0xf0, 0xe2, 0x40, 0xaa, 0x9a, 0x0e, 0xd4, 0x15, 0xd9, 0x82, 0xe5, 0x4b, 0x63, 0x5f, 0x88,
	0x7d, 0x64, 0xe4, 0x15, 0xd8, 0x32, 0x39, 0x4d, 0x29, 0x66, 0x98, 0xaf, 0xb8, 0x5b, 0x9d, 0x64,
	0x3a, 0xea, 0x2c, 0x6c, 0xd0, 0xe9, 0x25, 0xa7, 0xe9, 0x5e, 0x3c, 0x4b, 0xae, 0x85, 0x71, 0xea,
	0x3c, 0x1d, 0xad, 0x12, 0x6a, 0xcf, 0xe7, 0xe5, 0x6c, 0xf3, 0x10, 0xea, 0xe5, 0x02, 0x7d, 0xbe,
	0x17, 0xea, 0x9a, 0xa2, 0xb9, 0x53, 0xd3, 0x80, 0xbc, 0x80, 0xca, 0x57, 0x7d, 0x25, 0xcd, 0x8d,
	0x5b, 0x71, 0x9d, 0x62, 0x57, 0x73, 0x4f, 0x45, 0x3e, 0x7b, 0x63, 0xbd, 0x46, 0xed, 0x3b, 0x04,
	0x6b, 0xe5, 0xdb, 0x08, 0x35, 0xcb, 0x92, 0xf8, 0xa9, 0x85, 0xdf, 0x42, 0x35, 0x31, 0x41, 0x45,
	0xe7, 0xe7, 0x8b, 0x9d, 0xf3, 0x5d, 0x3a, 0xf9, 0xdf, 0x63, 0xf1, 0x62, 0xc5, 0xe6, 0x07, 0x68,
	0xcc, 0x0f, 0x9e, 0x5c, 0xf0, 0xe5, 0x01, 0xd4, 0x45, 0x3f, 0x38, 0x39, 0x1a, 0xbc, 0x7b, 0xbf,
	0x4b, 0x36, 0xa0, 0xbe, 0xdf, 0x3b, 0xde, 0x1d, 0xec, 0xf7, 0x0e, 0xf6, 0x9a, 0x37, 0x0f, 0xff,
	0xf2, 0x1f, 0x22, 0xeb, 0x60, 0x07, 0xbd, 0xc3, 0xc3, 0xe6, 0xcd, 0xdf, 0x12, 0x3d, 0x83, 0x65,
	0xb1, 0xf7, 0xf1, 0x93, 0x38, 0x6e, 0x3e, 0xfc, 0x29, 0xe0, 0x4e, 0xf3, 0xf6, 0xbe, 0x85, 0xbe,
	0xdf, 0xb7, 0xd0, 0x8f, 0xfb, 0x16, 0xfa, 0xf6, 0xb3, 0xb5, 0xf4, 0x3f, 0x00, 0x00, 0xff, 0xff,
	0x7a, 0x9b, 0xe5, 0x14, 0x14, 0x04, 0x00, 0x00,
}
